<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>获取当前日期并以YYYY-MM-DD形式输出1</title>
    <url>/2020/11/30/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E5%B9%B6%E4%BB%A5YYYY-MM-DD%E5%BD%A2%E5%BC%8F%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h4 id="方法一、"><a href="#方法一、" class="headerlink" title="方法一、"></a>方法一、</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前时间，格式YYYY-MM-DD</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNowFormatDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> seperator1 = <span class="string">&quot;-&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> strDate = date.getDate();</span><br><span class="line">  <span class="keyword">if</span> (month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">9</span>) &#123; month = <span class="string">&quot;0&quot;</span> + month; &#125;</span><br><span class="line">  <span class="keyword">if</span> (strDate &gt;= <span class="number">0</span> &amp;&amp; strDate &lt;= <span class="number">9</span>) &#123; strDate = <span class="string">&quot;0&quot;</span> + strDate; &#125;</span><br><span class="line">  <span class="keyword">var</span> currentdate = year + seperator1 + month + seperator1 + strDate;</span><br><span class="line">  <span class="keyword">return</span> currentdate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getNowFormatDate());</span><br></pre></td></tr></table></figure>


<h4 id="方法二、"><a href="#方法二、" class="headerlink" title="方法二、"></a>方法二、</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> time = myDate.toLocaleDateString().split(<span class="string">&#x27;/&#x27;</span>).join(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(time);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Vue中的computed和watch区别</title>
    <url>/2020/11/29/Vue%E4%B8%ADcomputed%E5%92%8Cwatch%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>以vue.js官方文档中获取全名的一个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">    fullName: <span class="string">&#x27;Foo Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fullName = val + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><p><code>computed：</code>是一个计算属性,类似于过滤器,对绑定到view的数据进行处理</p>
<p><code>watch：</code>是一个观察的动作</p>
<h2 id="2、区别"><a href="#2、区别" class="headerlink" title="2、区别"></a>2、区别</h2><h3 id="2-1、特性"><a href="#2-1、特性" class="headerlink" title="2.1、特性"></a>2.1、特性</h3><p><code>computed：</code></p>
<p>具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数</p>
<p><code>watch：</code></p>
<p>无缓存性，页面重新渲染时值不变化也会执行</p>
<h3 id="2-2、在写法上有没有什么区别？"><a href="#2-2、在写法上有没有什么区别？" class="headerlink" title="2.2、在写法上有没有什么区别？"></a>2.2、在写法上有没有什么区别？</h3><p>写法上有一个区别，<code>computed</code><strong>返回</strong>state处理后结果，<code>watch</code>是赋值行为，<strong>修改</strong>state。</p>
<ul>
<li>注意事项：<strong>不应该使用箭头函数来定义 watcher 函数</strong>，因为箭头函数没有 this，它的 this 会继承它的父级函数，但是它的父级函数是 window，导致箭头函数的 this 指向 window，而不是 Vue 实例</li>
</ul>
<h3 id="2-3、哪个更加底层？"><a href="#2-3、哪个更加底层？" class="headerlink" title="2.3、哪个更加底层？"></a>2.3、哪个更加底层？</h3><p><code>watch</code>和<code>computed</code>并没有哪个更底层，<code>watch</code>内部调用的是<code>vm.$watch</code>，它们的共同之处就是每个定义的属性都单独建立了一个<code>Watcher</code>对象。</p>
<h3 id="2-4、常见应用有什么？"><a href="#2-4、常见应用有什么？" class="headerlink" title="2.4、常见应用有什么？"></a>2.4、常见应用有什么？</h3><ul>
<li><p><code>computed</code>就是简化tempalte里面Mustache语法计算和处理props或$emit的传值.</p>
</li>
<li><p><code>watch</code>监听props，$emit或本组件的值执行异步操作。</p>
</li>
</ul>
<p><code>computed</code>的值在<code>getter</code>执行后是会缓存的，只有在它依赖的属性值改变之后，下一次获取<code>computed</code>的值时才会重新调用对应的<code>getter</code>来计算。<code>watch</code>在每次监听的值变化时，都会执行回调。其实从这一点来看，都是在依赖的值变化之后，去执行回调。很多功能本来就很多属性都可以用，只不过有更适合的。</p>
<p>如果一个值依赖多个属性（多对一），用<code>computed</code>肯定是更加方便的。如果一个值变化后会引起一系列操作，或者一个值变化会引起一系列值的变化（一对多），用<code>watch</code>更加方便一些。<br><code>watch</code>的回调里面会传入监听属性的新旧值，通过这两个值可以做一些特定的操作。<code>computed</code>通常就是简单的计算。</p>
<h2 id="3、我该选择哪个？"><a href="#3、我该选择哪个？" class="headerlink" title="3、我该选择哪个？"></a>3、我该选择哪个？</h2><p><code>computed</code>是用于定义<strong>基于数据之上的数据</strong>。</p>
<p>而<code>watch</code>是你想在<strong>某个数据变化时做一些事情</strong>，如果做的事情是更新其他数据，那其实与把这个要更新的数据项定义成<code>computed</code>是一样的，这个时候用computed更有可读性，虽然技术上讲<code>watch</code>也可以实现。</p>
<p>但你也可以在被watch的数据变化时做其他事情，比如调用一个方法，这个是<code>computed</code>做不到也不应该做的。</p>
<p>正如文档建议说 执行异步操作或开销较大的操作时使用<code>watch</code>。</p>
<h3 id="3-1、总结"><a href="#3-1、总结" class="headerlink" title="3.1、总结"></a>3.1、总结</h3><ol>
<li>简单且串行返回的，使用<code>computed</code>。</li>
<li>如果一个数据依赖于其他数据，那么把这个数据设计为<code>computed</code>的</li>
<li>如果你需要在某个数据变化时做一些事情，使用<code>watch</code>来观察这个数据变化。</li>
<li>执行异步操作不能串行返回结果，使用<code>watch</code>。</li>
<li>开销较大的操作，避免堵塞主线程，使用<code>watch</code>。</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
</search>
